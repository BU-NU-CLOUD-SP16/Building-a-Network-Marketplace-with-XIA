!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT_OVSL	datapath.h	151;"	d
CT_SUPPORTED_MASK	conntrack.h	38;"	d
CT_SUPPORTED_MASK	conntrack.h	91;"	d
DATAPATH_H	datapath.h	20;"	d
DEFERRED_ACTION_FIFO_SIZE	actions.c	73;"	d	file:
DP_MAX_PORTS	datapath.h	34;"	d
DP_VPORT_HASH_BUCKETS	datapath.h	35;"	d
FLOW_H	flow.h	20;"	d
FLOW_NETLINK_H	flow_netlink.h	21;"	d
FLOW_TABLE_H	flow_table.h	20;"	d
MAX_ACTIONS_BUFSIZE	flow_netlink.c	1673;"	d	file:
MAX_L2_LEN	actions.c	59;"	d	file:
MAX_UFID_LENGTH	flow.h	144;"	d
OVS_ATTR_NESTED	flow_netlink.c	59;"	d	file:
OVS_ATTR_VARIABLE	flow_netlink.c	60;"	d	file:
OVS_CB	datapath.h	105;"	d
OVS_CONNTRACK_H	conntrack.h	15;"	d
OVS_MASKED	datapath.h	208;"	d
OVS_NLERR	datapath.h	211;"	d
OVS_SET_MASKED	datapath.h	209;"	d
OVS_SW_FLOW_KEY_METADATA_SIZE	flow.h	53;"	d
REHASH_INTERVAL	flow_table.c	49;"	d	file:
SAMPLE_ACTION_DEPTH	datapath.h	37;"	d
SW_FLOW_KEY_MEMCPY	flow_netlink.c	107;"	d	file:
SW_FLOW_KEY_MEMCPY_OFFSET	flow_netlink.c	97;"	d	file:
SW_FLOW_KEY_MEMSET_FIELD	flow_netlink.c	111;"	d	file:
SW_FLOW_KEY_PUT	flow_netlink.c	87;"	d	file:
TBL_MIN_BUCKETS	flow_table.c	48;"	d	file:
TCP_FLAGS_BE16	flow.c	68;"	d	file:
TUN_METADATA_OFFSET	flow.h	44;"	d
TUN_METADATA_OPTS	flow.h	46;"	d
VPORT_ALIGN	vport.h	154;"	d
VPORT_H	vport.h	20;"	d
VPORT_HASH_BUCKETS	vport.c	41;"	d	file:
VPORT_INTERNAL_DEV_H	vport-internal_dev.h	20;"	d
VPORT_NETDEV_H	vport-netdev.h	20;"	d
__add_action	flow_netlink.c	/^static struct nlattr *__add_action(struct sw_flow_actions **sfa,$/;"	f	file:
__dp_destroy	datapath.c	/^static void __dp_destroy(struct datapath *dp)$/;"	f	file:
__ip_tun_to_nlattr	flow_netlink.c	/^static int __ip_tun_to_nlattr(struct sk_buff *skb,$/;"	f	file:
__ovs_ct_free_action	conntrack.c	/^static void __ovs_ct_free_action(struct ovs_conntrack_info *ct_info)$/;"	f	file:
__ovs_ct_lookup	conntrack.c	/^static int __ovs_ct_lookup(struct net *net, struct sw_flow_key *key,$/;"	f	file:
__ovs_ct_update_key	conntrack.c	/^static void __ovs_ct_update_key(struct sw_flow_key *key, u8 state,$/;"	f	file:
__ovs_nla_copy_actions	flow_netlink.c	/^static int __ovs_nla_copy_actions(struct net *net, const struct nlattr *attr,$/;"	f	file:
__ovs_nla_free_flow_actions	flow_netlink.c	/^static void __ovs_nla_free_flow_actions(struct rcu_head *head)$/;"	f	file:
__ovs_nla_put_key	flow_netlink.c	/^static int __ovs_nla_put_key(const struct sw_flow_key *swkey,$/;"	f	file:
__ovs_vport_ops_register	vport.c	/^EXPORT_SYMBOL_GPL(__ovs_vport_ops_register);$/;"	v
__ovs_vport_ops_register	vport.c	/^int __ovs_vport_ops_register(struct vport_ops *ops)$/;"	f
__packed	flow.h	/^} __packed;$/;"	v	typeref:struct:arp_eth_header
__parse_flow_nlattrs	flow_netlink.c	/^static int __parse_flow_nlattrs(const struct nlattr *attr,$/;"	f	file:
__read_mostly	datapath.c	/^int ovs_net_id __read_mostly;$/;"	v
__read_mostly	flow_table.c	/^struct kmem_cache *flow_stats_cache __read_mostly;$/;"	v	typeref:struct:flow_stats_cache
__read_mostly	vport-internal_dev.c	/^static struct rtnl_link_ops internal_dev_link_ops __read_mostly = {$/;"	v	typeref:struct:internal_dev_link_ops	file:
__table_instance_destroy	flow_table.c	/^static void __table_instance_destroy(struct table_instance *ti)$/;"	f	file:
action_fifo	actions.c	/^struct action_fifo {$/;"	s	file:
action_fifo_get	actions.c	/^static struct deferred_action *action_fifo_get(struct action_fifo *fifo)$/;"	f	file:
action_fifo_init	actions.c	/^static void action_fifo_init(struct action_fifo *fifo)$/;"	f	file:
action_fifo_is_empty	actions.c	/^static bool action_fifo_is_empty(const struct action_fifo *fifo)$/;"	f	file:
action_fifo_put	actions.c	/^static struct deferred_action *action_fifo_put(struct action_fifo *fifo)$/;"	f	file:
action_fifos	actions.c	/^static struct action_fifo __percpu *action_fifos;$/;"	v	typeref:struct:__percpu	file:
action_fifos_exit	actions.c	/^void action_fifos_exit(void)$/;"	f
action_fifos_init	actions.c	/^int action_fifos_init(void)$/;"	f
actions	actions.c	/^	const struct nlattr *actions;$/;"	m	struct:deferred_action	typeref:struct:deferred_action::nlattr	file:
actions	datapath.h	/^	const struct nlattr *actions;$/;"	m	struct:dp_upcall_info	typeref:struct:dp_upcall_info::nlattr
actions	flow.h	/^	struct nlattr actions[];$/;"	m	struct:sw_flow_actions	typeref:struct:sw_flow_actions::nlattr
actions_len	datapath.h	/^	int actions_len;$/;"	m	struct:dp_upcall_info
actions_len	flow.h	/^	u32 actions_len;$/;"	m	struct:sw_flow_actions
add_deferred_actions	actions.c	/^static struct deferred_action *add_deferred_actions(struct sk_buff *skb,$/;"	f	file:
add_nested_action_end	flow_netlink.c	/^static inline void add_nested_action_end(struct sw_flow_actions *sfa,$/;"	f	file:
add_nested_action_start	flow_netlink.c	/^static inline int add_nested_action_start(struct sw_flow_actions **sfa,$/;"	f	file:
addr	flow.h	/^			} addr;$/;"	m	struct:sw_flow_key::__anon7::__anon11	typeref:struct:sw_flow_key::__anon7::__anon11::__anon12
addr	flow.h	/^			} addr;$/;"	m	struct:sw_flow_key::__anon7::__anon8	typeref:struct:sw_flow_key::__anon7::__anon8::__anon9
alloc_buckets	flow_table.c	/^static struct flex_array *alloc_buckets(unsigned int n_buckets)$/;"	f	file:
ar_hln	flow.h	/^	unsigned char   ar_hln;	\/* length of hardware address   *\/$/;"	m	struct:arp_eth_header
ar_hrd	flow.h	/^	__be16      ar_hrd;	\/* format of hardware address   *\/$/;"	m	struct:arp_eth_header
ar_op	flow.h	/^	__be16      ar_op;	\/* ARP opcode (command)     *\/$/;"	m	struct:arp_eth_header
ar_pln	flow.h	/^	unsigned char   ar_pln;	\/* length of protocol address   *\/$/;"	m	struct:arp_eth_header
ar_pro	flow.h	/^	__be16      ar_pro;	\/* format of protocol address   *\/$/;"	m	struct:arp_eth_header
ar_sha	flow.h	/^	unsigned char       ar_sha[ETH_ALEN];	\/* sender hardware address  *\/$/;"	m	struct:arp_eth_header
ar_sip	flow.h	/^	unsigned char       ar_sip[4];		\/* sender IP address        *\/$/;"	m	struct:arp_eth_header
ar_tha	flow.h	/^	unsigned char       ar_tha[ETH_ALEN];	\/* target hardware address  *\/$/;"	m	struct:arp_eth_header
ar_tip	flow.h	/^	unsigned char       ar_tip[4];		\/* target IP address        *\/$/;"	m	struct:arp_eth_header
arp	flow.h	/^			} arp;$/;"	m	struct:sw_flow_key::__anon7::__anon8	typeref:struct:sw_flow_key::__anon7::__anon8::__anon10
arp_eth_header	flow.h	/^struct arp_eth_header {$/;"	s
arphdr_ok	flow.c	/^static bool arphdr_ok(struct sk_buff *skb)$/;"	f	file:
buckets	flow_table.h	/^	struct flex_array *buckets;$/;"	m	struct:table_instance	typeref:struct:table_instance::flex_array
byte_count	flow.h	/^	u64 byte_count;			\/* Number of bytes matched. *\/$/;"	m	struct:flow_stats
cb	actions.c	/^	struct ovs_skb_cb cb;$/;"	m	struct:ovs_frag_data	typeref:struct:ovs_frag_data::ovs_skb_cb	file:
check_attr_len	flow_netlink.c	/^static bool check_attr_len(unsigned int attr_len, unsigned int expected_len)$/;"	f	file:
check_header	flow.c	/^static int check_header(struct sk_buff *skb, int len)$/;"	f	file:
check_iphdr	flow.c	/^static int check_iphdr(struct sk_buff *skb)$/;"	f	file:
cmd	datapath.h	/^	u8 cmd;$/;"	m	struct:dp_upcall_info
cmp_key	flow_table.c	/^static bool cmp_key(const struct sw_flow_key *key1,$/;"	f	file:
commit	conntrack.c	/^	u8 commit : 1;$/;"	m	struct:ovs_conntrack_info	file:
copy_action	flow_netlink.c	/^static int copy_action(const struct nlattr *from,$/;"	f	file:
count	flow_table.h	/^	unsigned int count;$/;"	m	struct:flow_table
create	vport.h	/^	struct vport *(*create)(const struct vport_parms *);$/;"	m	struct:vport_ops	typeref:struct:vport_ops::create
ct	conntrack.c	/^	struct nf_conn *ct;$/;"	m	struct:ovs_conntrack_info	typeref:struct:ovs_conntrack_info::nf_conn	file:
ct	flow.h	/^	} ct;$/;"	m	struct:sw_flow_key	typeref:struct:sw_flow_key::__anon14
datapath	datapath.h	/^struct datapath {$/;"	s
datapath_policy	datapath.c	/^static const struct nla_policy datapath_policy[OVS_DP_ATTR_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
deferred_action	actions.c	/^struct deferred_action {$/;"	s	file:
destroy	vport.h	/^	void (*destroy)(struct vport *);$/;"	m	struct:vport_ops
destroy_dp_rcu	datapath.c	/^static void destroy_dp_rcu(struct rcu_head *rcu)$/;"	f	file:
detach_list	vport.h	/^	struct list_head detach_list;$/;"	m	struct:vport	typeref:struct:vport::list_head
dev	vport.h	/^	struct net_device *dev;$/;"	m	struct:vport	typeref:struct:vport::net_device
dev_table	vport.c	/^static struct hlist_head *dev_table;$/;"	v	typeref:struct:hlist_head	file:
do_execute_actions	actions.c	/^static int do_execute_actions(struct datapath *dp, struct sk_buff *skb,$/;"	f	file:
do_output	actions.c	/^static void do_output(struct datapath *dp, struct sk_buff *skb, int out_port,$/;"	f	file:
do_setup	vport-internal_dev.c	/^static void do_setup(struct net_device *netdev)$/;"	f	file:
dp	vport.h	/^	struct datapath	*dp;$/;"	m	struct:vport	typeref:struct:vport::datapath
dp	vport.h	/^	struct datapath *dp;$/;"	m	struct:vport_parms	typeref:struct:vport_parms::datapath
dp_cleanup	datapath.c	/^module_exit(dp_cleanup);$/;"	v
dp_cleanup	datapath.c	/^static void dp_cleanup(void)$/;"	f	file:
dp_datapath_genl_family	datapath.c	/^static struct genl_family dp_datapath_genl_family = {$/;"	v	typeref:struct:genl_family	file:
dp_datapath_genl_family	datapath.c	/^static struct genl_family dp_datapath_genl_family;$/;"	v	typeref:struct:genl_family	file:
dp_datapath_genl_ops	datapath.c	/^static const struct genl_ops dp_datapath_genl_ops[] = {$/;"	v	typeref:struct:genl_ops	file:
dp_detach_port_notify	dp_notify.c	/^static void dp_detach_port_notify(struct vport *vport)$/;"	f	file:
dp_device_event	dp_notify.c	/^static int dp_device_event(struct notifier_block *unused, unsigned long event,$/;"	f	file:
dp_flow_genl_family	datapath.c	/^static struct genl_family dp_flow_genl_family = {$/;"	v	typeref:struct:genl_family	file:
dp_flow_genl_family	datapath.c	/^static struct genl_family dp_flow_genl_family;$/;"	v	typeref:struct:genl_family	file:
dp_flow_genl_ops	datapath.c	/^static const struct genl_ops dp_flow_genl_ops[] = {$/;"	v	typeref:struct:genl_ops	file:
dp_genl_families	datapath.c	/^static struct genl_family * const dp_genl_families[] = {$/;"	v	file:
dp_hash_node	vport.h	/^	struct hlist_node dp_hash_node;$/;"	m	struct:vport	typeref:struct:vport::hlist_node
dp_init	datapath.c	/^module_init(dp_init);$/;"	v
dp_init	datapath.c	/^static int __init dp_init(void)$/;"	f	file:
dp_notify_work	datapath.h	/^	struct work_struct dp_notify_work;$/;"	m	struct:ovs_net	typeref:struct:ovs_net::work_struct
dp_packet_genl_family	datapath.c	/^static struct genl_family dp_packet_genl_family = {$/;"	v	typeref:struct:genl_family	file:
dp_packet_genl_family	datapath.c	/^static struct genl_family dp_packet_genl_family;$/;"	v	typeref:struct:genl_family	file:
dp_packet_genl_ops	datapath.c	/^static const struct genl_ops dp_packet_genl_ops[] = {$/;"	v	typeref:struct:genl_ops	file:
dp_register_genl	datapath.c	/^static int dp_register_genl(void)$/;"	f	file:
dp_stats_percpu	datapath.h	/^struct dp_stats_percpu {$/;"	s
dp_unregister_genl	datapath.c	/^static void dp_unregister_genl(int n_families)$/;"	f	file:
dp_upcall_info	datapath.h	/^struct dp_upcall_info {$/;"	s
dp_vport_genl_family	datapath.c	/^struct genl_family dp_vport_genl_family = {$/;"	v	typeref:struct:genl_family
dp_vport_genl_ops	datapath.c	/^static const struct genl_ops dp_vport_genl_ops[] = {$/;"	v	typeref:struct:genl_ops	file:
dps	datapath.h	/^	struct list_head dps;$/;"	m	struct:ovs_net	typeref:struct:ovs_net::list_head
dst	actions.c	/^	unsigned long dst;$/;"	m	struct:ovs_frag_data	file:
dst	flow.h	/^				__be32 dst;	\/* IP destination address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon8::__anon9
dst	flow.h	/^				struct in6_addr dst;	\/* IPv6 destination address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon11::__anon12	typeref:struct:sw_flow_key::__anon7::__anon11::__anon12::in6_addr
dst	flow.h	/^		__be16 dst;		\/* TCP\/UDP\/SCTP destination port. *\/$/;"	m	struct:sw_flow_key::__anon6
dst	flow.h	/^		u8     dst[ETH_ALEN];	\/* Ethernet destination address. *\/$/;"	m	struct:sw_flow_key::__anon2
dst_port	vport-geneve.c	/^	u16 dst_port;$/;"	m	struct:geneve_port	file:
egress_tun_info	datapath.h	/^	struct ip_tunnel_info *egress_tun_info;$/;"	m	struct:dp_upcall_info	typeref:struct:dp_upcall_info::ip_tunnel_info
end	flow.h	/^	unsigned short int end;$/;"	m	struct:sw_flow_key_range
eth	flow.h	/^	} eth;$/;"	m	struct:sw_flow_key	typeref:struct:sw_flow_key::__anon2
ether_addr_copy_masked	actions.c	/^static void ether_addr_copy_masked(u8 *dst_, const u8 *src_, const u8 *mask_)$/;"	f	file:
execute_hash	actions.c	/^static void execute_hash(struct sk_buff *skb, struct sw_flow_key *key,$/;"	f	file:
execute_masked_set_action	actions.c	/^static int execute_masked_set_action(struct sk_buff *skb,$/;"	f	file:
execute_recirc	actions.c	/^static int execute_recirc(struct datapath *dp, struct sk_buff *skb,$/;"	f	file:
execute_set_action	actions.c	/^static int execute_set_action(struct sk_buff *skb,$/;"	f	file:
exts_policy	vport-vxlan.c	/^static const struct nla_policy exts_policy[OVS_VXLAN_EXT_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
family	conntrack.c	/^	u16 family;$/;"	m	struct:ovs_conntrack_info	file:
fifo	actions.c	/^	struct deferred_action fifo[DEFERRED_ACTION_FIFO_SIZE];$/;"	m	struct:action_fifo	typeref:struct:action_fifo::deferred_action	file:
find_bucket	flow_table.c	/^static struct hlist_head *find_bucket(struct table_instance *ti, u32 hash)$/;"	f	file:
flags	flow.h	/^		__be16 flags;		\/* TCP flags. *\/$/;"	m	struct:sw_flow_key::__anon6
flow_cache	flow_table.c	/^static struct kmem_cache *flow_cache;$/;"	v	typeref:struct:kmem_cache	file:
flow_cmp_masked_key	flow_table.c	/^static bool flow_cmp_masked_key(const struct sw_flow *flow,$/;"	f	file:
flow_free	flow_table.c	/^static void flow_free(struct sw_flow *flow)$/;"	f	file:
flow_hash	flow_table.c	/^static u32 flow_hash(const struct sw_flow_key *key,$/;"	f	file:
flow_key_insert	flow_table.c	/^static void flow_key_insert(struct flow_table *table, struct sw_flow *flow)$/;"	f	file:
flow_key_start	flow_table.c	/^static int flow_key_start(const struct sw_flow_key *key)$/;"	f	file:
flow_mask_find	flow_table.c	/^static struct sw_flow_mask *flow_mask_find(const struct flow_table *tbl,$/;"	f	file:
flow_mask_insert	flow_table.c	/^static int flow_mask_insert(struct flow_table *tbl, struct sw_flow *flow,$/;"	f	file:
flow_mask_remove	flow_table.c	/^static void flow_mask_remove(struct flow_table *tbl, struct sw_flow_mask *mask)$/;"	f	file:
flow_policy	datapath.c	/^static const struct nla_policy flow_policy[OVS_FLOW_ATTR_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
flow_policy	datapath.c	/^static const struct nla_policy flow_policy[];$/;"	v	typeref:struct:nla_policy	file:
flow_stats	flow.h	/^struct flow_stats {$/;"	s
flow_table	flow.h	/^	} flow_table, ufid_table;$/;"	m	struct:sw_flow	typeref:struct:sw_flow::__anon16
flow_table	flow_table.h	/^struct flow_table {$/;"	s
flow_table_copy_flows	flow_table.c	/^static void flow_table_copy_flows(struct table_instance *old,$/;"	f	file:
flow_tbl_destroy_rcu_cb	flow_table.c	/^static void flow_tbl_destroy_rcu_cb(struct rcu_head *rcu)$/;"	f	file:
flow_ufid_insert	flow_table.c	/^static void flow_ufid_insert(struct flow_table *table, struct sw_flow *flow)$/;"	f	file:
frag	flow.h	/^			u8     frag;	\/* One of OVS_FRAG_TYPE_*. *\/$/;"	m	struct:sw_flow_key::__anon3::__anon5
free_buckets	flow_table.c	/^static void free_buckets(struct flex_array *buckets)$/;"	f	file:
free_vport_rcu	vport.c	/^static void free_vport_rcu(struct rcu_head *rcu)$/;"	f	file:
genev_tun_opt_from_nlattr	flow_netlink.c	/^static int genev_tun_opt_from_nlattr(const struct nlattr *a,$/;"	f	file:
geneve_create	vport-geneve.c	/^static struct vport *geneve_create(const struct vport_parms *parms)$/;"	f	file:
geneve_get_options	vport-geneve.c	/^static int geneve_get_options(const struct vport *vport,$/;"	f	file:
geneve_port	vport-geneve.c	/^struct geneve_port {$/;"	s	file:
geneve_tnl_create	vport-geneve.c	/^static struct vport *geneve_tnl_create(const struct vport_parms *parms)$/;"	f	file:
geneve_vport	vport-geneve.c	/^static inline struct geneve_port *geneve_vport(const struct vport *vport)$/;"	f	file:
get_dp	datapath.c	/^static inline struct datapath *get_dp(struct net *net, int dp_ifindex)$/;"	f	file:
get_dp_rcu	datapath.c	/^static struct datapath *get_dp_rcu(struct net *net, int dp_ifindex)$/;"	f	file:
get_dp_stats	datapath.c	/^static void get_dp_stats(const struct datapath *dp, struct ovs_dp_stats *stats,$/;"	f	file:
get_dpdev	vport-netdev.c	/^static struct net_device *get_dpdev(const struct datapath *dp)$/;"	f	file:
get_dpifindex	datapath.c	/^static int get_dpifindex(const struct datapath *dp)$/;"	f	file:
get_flow_actions	datapath.c	/^static struct sw_flow_actions *get_flow_actions(struct net *net,$/;"	f	file:
get_mask	actions.c	909;"	d	file:
get_options	vport.h	/^	int (*get_options)(const struct vport *, struct sk_buff *);$/;"	m	struct:vport_ops
get_ufid_len	flow_netlink.c	/^static size_t get_ufid_len(const struct nlattr *attr, bool log)$/;"	f	file:
gre_create	vport-gre.c	/^static struct vport *gre_create(const struct vport_parms *parms)$/;"	f	file:
gre_tnl_create	vport-gre.c	/^static struct vport *gre_tnl_create(const struct vport_parms *parms)$/;"	f	file:
handle_fragments	conntrack.c	/^static int handle_fragments(struct net *net, struct sw_flow_key *key,$/;"	f	file:
hash	flow.h	/^		u32 hash;$/;"	m	struct:sw_flow::__anon16
hash_bucket	vport.c	/^static struct hlist_head *hash_bucket(const struct net *net, const char *name)$/;"	f	file:
hash_node	vport.h	/^	struct hlist_node hash_node;$/;"	m	struct:vport	typeref:struct:vport::hlist_node
hash_seed	flow_table.h	/^	u32 hash_seed;$/;"	m	struct:table_instance
head	actions.c	/^	int head;$/;"	m	struct:action_fifo	file:
helper	conntrack.c	/^	struct nf_conntrack_helper *helper;$/;"	m	struct:ovs_conntrack_info	typeref:struct:ovs_conntrack_info::nf_conntrack_helper	file:
icmp6hdr_ok	flow.c	/^static bool icmp6hdr_ok(struct sk_buff *skb)$/;"	f	file:
icmphdr_ok	flow.c	/^static bool icmphdr_ok(struct sk_buff *skb)$/;"	f	file:
id	flow.h	/^	struct sw_flow_id id;$/;"	m	struct:sw_flow	typeref:struct:sw_flow::sw_flow_id
ids	vport.h	/^	u32 ids[];$/;"	m	struct:vport_portids
in_port	flow.h	/^		u16	in_port;	\/* Input switch port (or DP_MAX_PORTS). *\/$/;"	m	struct:sw_flow_key::__anon1
inner_protocol	actions.c	/^	__be16 inner_protocol;$/;"	m	struct:ovs_frag_data	file:
input_vport	datapath.h	/^	struct vport		*input_vport;$/;"	m	struct:ovs_skb_cb	typeref:struct:ovs_skb_cb::vport
internal_dev	vport-internal_dev.c	/^struct internal_dev {$/;"	s	file:
internal_dev_change_mtu	vport-internal_dev.c	/^static int internal_dev_change_mtu(struct net_device *netdev, int new_mtu)$/;"	f	file:
internal_dev_create	vport-internal_dev.c	/^static struct vport *internal_dev_create(const struct vport_parms *parms)$/;"	f	file:
internal_dev_destroy	vport-internal_dev.c	/^static void internal_dev_destroy(struct vport *vport)$/;"	f	file:
internal_dev_destructor	vport-internal_dev.c	/^static void internal_dev_destructor(struct net_device *dev)$/;"	f	file:
internal_dev_ethtool_ops	vport-internal_dev.c	/^static const struct ethtool_ops internal_dev_ethtool_ops = {$/;"	v	typeref:struct:ethtool_ops	file:
internal_dev_getinfo	vport-internal_dev.c	/^static void internal_dev_getinfo(struct net_device *netdev,$/;"	f	file:
internal_dev_netdev_ops	vport-internal_dev.c	/^static const struct net_device_ops internal_dev_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
internal_dev_open	vport-internal_dev.c	/^static int internal_dev_open(struct net_device *netdev)$/;"	f	file:
internal_dev_priv	vport-internal_dev.c	/^static struct internal_dev *internal_dev_priv(struct net_device *netdev)$/;"	f	file:
internal_dev_recv	vport-internal_dev.c	/^static netdev_tx_t internal_dev_recv(struct sk_buff *skb)$/;"	f	file:
internal_dev_stop	vport-internal_dev.c	/^static int internal_dev_stop(struct net_device *netdev)$/;"	f	file:
internal_dev_xmit	vport-internal_dev.c	/^static int internal_dev_xmit(struct sk_buff *skb, struct net_device *netdev)$/;"	f	file:
internal_get_stats	vport-internal_dev.c	/^internal_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)$/;"	f	file:
invalidate_flow_key	actions.c	/^static void invalidate_flow_key(struct sw_flow_key *key)$/;"	f	file:
ip	flow.h	/^		} ip;$/;"	m	union:sw_flow_key::__anon3	typeref:struct:sw_flow_key::__anon3::__anon5
ip_tun_from_nlattr	flow_netlink.c	/^static int ip_tun_from_nlattr(const struct nlattr *attr,$/;"	f	file:
ip_tun_to_nlattr	flow_netlink.c	/^static int ip_tun_to_nlattr(struct sk_buff *skb,$/;"	f	file:
ipv4	flow.h	/^		} ipv4;$/;"	m	union:sw_flow_key::__anon7	typeref:struct:sw_flow_key::__anon7::__anon8
ipv6	flow.h	/^		} ipv6;$/;"	m	union:sw_flow_key::__anon7	typeref:struct:sw_flow_key::__anon7::__anon11
is_all_zero	flow_netlink.c	/^static bool is_all_zero(const u8 *fp, size_t size)$/;"	f	file:
is_flow_key_valid	actions.c	/^static bool is_flow_key_valid(const struct sw_flow_key *key)$/;"	f	file:
is_ipv6_mask_nonzero	actions.c	/^static bool is_ipv6_mask_nonzero(const __be32 addr[4])$/;"	f	file:
keep_flows	flow_table.h	/^	bool keep_flows;$/;"	m	struct:table_instance
key	flow.h	/^	struct sw_flow_key *key;$/;"	m	struct:sw_flow_match	typeref:struct:sw_flow_match::sw_flow_key
key	flow.h	/^	struct sw_flow_key key;$/;"	m	struct:sw_flow	typeref:struct:sw_flow::sw_flow_key
key	flow.h	/^	struct sw_flow_key key;$/;"	m	struct:sw_flow_mask	typeref:struct:sw_flow_mask::sw_flow_key
key_extract	flow.c	/^static int key_extract(struct sk_buff *skb, struct sw_flow_key *key)$/;"	f	file:
key_to_nfproto	conntrack.c	/^static u16 key_to_nfproto(const struct sw_flow_key *key)$/;"	f	file:
l2_data	actions.c	/^	u8 l2_data[MAX_L2_LEN];$/;"	m	struct:ovs_frag_data	file:
l2_len	actions.c	/^	unsigned int l2_len;$/;"	m	struct:ovs_frag_data	file:
label	flow.h	/^			__be32 label;			\/* IPv6 flow label. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon11
labels	conntrack.c	/^	struct md_labels labels;$/;"	m	struct:ovs_conntrack_info	typeref:struct:ovs_conntrack_info::md_labels	file:
labels	flow.h	/^		struct ovs_key_ct_labels labels;$/;"	m	struct:sw_flow_key::__anon14	typeref:struct:sw_flow_key::__anon14::ovs_key_ct_labels
labels_nonzero	conntrack.c	/^static bool labels_nonzero(const struct ovs_key_ct_labels *labels)$/;"	f	file:
last_rehash	flow_table.h	/^	unsigned long last_rehash;$/;"	m	struct:flow_table
len	flow_netlink.c	/^	int len;$/;"	m	struct:ovs_len_tbl	file:
list	flow.h	/^	struct list_head list;$/;"	m	struct:sw_flow_mask	typeref:struct:sw_flow_mask::list_head
list	vport.h	/^	struct list_head list;$/;"	m	struct:vport_ops	typeref:struct:vport_ops::list_head
list_node	datapath.h	/^	struct list_head list_node;$/;"	m	struct:datapath	typeref:struct:datapath::list_head
list_vports_from_net	datapath.c	/^static void __net_exit list_vports_from_net(struct net *net, struct net *dnet,$/;"	f	file:
lock	flow.h	/^	spinlock_t lock;		\/* Lock for atomic stats update. *\/$/;"	m	struct:flow_stats
lockdep_ovsl_is_held	datapath.c	/^EXPORT_SYMBOL_GPL(lockdep_ovsl_is_held);$/;"	v
lockdep_ovsl_is_held	datapath.c	/^int lockdep_ovsl_is_held(void)$/;"	f
lockdep_ovsl_is_held	datapath.h	148;"	d
lookup_datapath	datapath.c	/^static struct datapath *lookup_datapath(struct net *net,$/;"	f	file:
lookup_vport	datapath.c	/^static struct vport *lookup_vport(struct net *net,$/;"	f	file:
mark	conntrack.c	/^	struct md_mark mark;$/;"	m	struct:ovs_conntrack_info	typeref:struct:ovs_conntrack_info::md_mark	file:
mark	flow.h	/^		u32 mark;$/;"	m	struct:sw_flow_key::__anon14
mask	conntrack.c	/^	struct ovs_key_ct_labels mask;$/;"	m	struct:md_labels	typeref:struct:md_labels::ovs_key_ct_labels	file:
mask	conntrack.c	/^	u32 mask;$/;"	m	struct:md_mark	file:
mask	flow.h	/^	struct sw_flow_mask *mask;$/;"	m	struct:sw_flow	typeref:struct:sw_flow::sw_flow_mask
mask	flow.h	/^	struct sw_flow_mask *mask;$/;"	m	struct:sw_flow_match	typeref:struct:sw_flow_match::sw_flow_mask
mask_alloc	flow_table.c	/^static struct sw_flow_mask *mask_alloc(void)$/;"	f	file:
mask_equal	flow_table.c	/^static bool mask_equal(const struct sw_flow_mask *a,$/;"	f	file:
mask_ipv6_addr	actions.c	/^static void mask_ipv6_addr(const __be32 old[4], const __be32 addr[4],$/;"	f	file:
mask_list	flow_table.h	/^	struct list_head mask_list;$/;"	m	struct:flow_table	typeref:struct:flow_table::list_head
mask_set_nlattr	flow_netlink.c	/^static void mask_set_nlattr(struct nlattr *attr, u8 val)$/;"	f	file:
masked_flow_lookup	flow_table.c	/^static struct sw_flow *masked_flow_lookup(struct table_instance *ti,$/;"	f	file:
masked_set_action_to_set_action_attr	flow_netlink.c	/^static int masked_set_action_to_set_action_attr(const struct nlattr *a,$/;"	f	file:
match_validate	flow_netlink.c	/^static bool match_validate(const struct sw_flow_match *match,$/;"	f	file:
maxlen	conntrack.c	/^	size_t maxlen;$/;"	m	struct:ovs_ct_len_tbl	file:
md_labels	conntrack.c	/^struct md_labels {$/;"	s	file:
md_mark	conntrack.c	/^struct md_mark {$/;"	s	file:
metadata_from_nlattrs	flow_netlink.c	/^static int metadata_from_nlattrs(struct net *net, struct sw_flow_match *match,$/;"	f	file:
minlen	conntrack.c	/^	size_t minlen;$/;"	m	struct:ovs_ct_len_tbl	file:
mpls	flow.h	/^		} mpls;$/;"	m	union:sw_flow_key::__anon3	typeref:struct:sw_flow_key::__anon3::__anon4
mru	datapath.h	/^	u16			mru;$/;"	m	struct:ovs_skb_cb
mru	datapath.h	/^	u16 mru;$/;"	m	struct:dp_upcall_info
n_buckets	flow_table.h	/^	unsigned int n_buckets;$/;"	m	struct:table_instance
n_hit	datapath.h	/^	u64 n_hit;$/;"	m	struct:dp_stats_percpu
n_ids	vport.h	/^	u32 n_ids;$/;"	m	struct:vport_portids
n_lost	datapath.h	/^	u64 n_lost;$/;"	m	struct:dp_stats_percpu
n_mask_hit	datapath.h	/^	u64 n_mask_hit;$/;"	m	struct:dp_stats_percpu
n_missed	datapath.h	/^	u64 n_missed;$/;"	m	struct:dp_stats_percpu
name	vport.h	/^	const char *name;$/;"	m	struct:vport_parms
nd	flow.h	/^			} nd;$/;"	m	struct:sw_flow_key::__anon7::__anon11	typeref:struct:sw_flow_key::__anon7::__anon11::__anon13
net	datapath.h	/^	possible_net_t net;$/;"	m	struct:datapath
netdev_create	vport-netdev.c	/^static struct vport *netdev_create(const struct vport_parms *parms)$/;"	f	file:
netdev_destroy	vport-netdev.c	/^static void netdev_destroy(struct vport *vport)$/;"	f	file:
netdev_frame_hook	vport-netdev.c	/^static rx_handler_result_t netdev_frame_hook(struct sk_buff **pskb)$/;"	f	file:
netdev_port_receive	vport-netdev.c	/^static void netdev_port_receive(struct sk_buff *skb)$/;"	f	file:
new_vport	datapath.c	/^static struct vport *new_vport(const struct vport_parms *parms)$/;"	f	file:
next	flow_netlink.c	/^	const struct ovs_len_tbl *next;$/;"	m	struct:ovs_len_tbl	typeref:struct:ovs_len_tbl::ovs_len_tbl	file:
nla_alloc_flow_actions	flow_netlink.c	/^static struct sw_flow_actions *nla_alloc_flow_actions(int size, bool log)$/;"	f	file:
nlattr_set	flow_netlink.c	/^static void nlattr_set(struct nlattr *attr, u8 val,$/;"	f	file:
node	flow.h	/^		struct hlist_node node[2];$/;"	m	struct:sw_flow::__anon16	typeref:struct:sw_flow::__anon16::hlist_node
node_ver	flow_table.h	/^	int node_ver;$/;"	m	struct:table_instance
openvswitch-y	Makefile	/^openvswitch-y := \\$/;"	m
ops	vport.h	/^	const struct vport_ops *ops;$/;"	m	struct:vport	typeref:struct:vport::vport_ops
options	vport.h	/^	struct nlattr *options;$/;"	m	struct:vport_parms	typeref:struct:vport_parms::nlattr
orig_len	flow.h	/^	size_t orig_len;	\/* From flow_cmd_new netlink actions size *\/$/;"	m	struct:sw_flow_actions
output_userspace	actions.c	/^static int output_userspace(struct datapath *dp, struct sk_buff *skb,$/;"	f	file:
ovs_conntrack_info	conntrack.c	/^struct ovs_conntrack_info {$/;"	s	file:
ovs_ct_action_to_attr	conntrack.c	/^int ovs_ct_action_to_attr(const struct ovs_conntrack_info *ct_info,$/;"	f
ovs_ct_action_to_attr	conntrack.h	/^static inline int ovs_ct_action_to_attr(const struct ovs_conntrack_info *info,$/;"	f
ovs_ct_add_helper	conntrack.c	/^static int ovs_ct_add_helper(struct ovs_conntrack_info *info, const char *name,$/;"	f	file:
ovs_ct_attr_lens	conntrack.c	/^static const struct ovs_ct_len_tbl ovs_ct_attr_lens[OVS_CT_ATTR_MAX + 1] = {$/;"	v	typeref:struct:ovs_ct_len_tbl	file:
ovs_ct_commit	conntrack.c	/^static int ovs_ct_commit(struct net *net, struct sw_flow_key *key,$/;"	f	file:
ovs_ct_copy_action	conntrack.c	/^int ovs_ct_copy_action(struct net *net, const struct nlattr *attr,$/;"	f
ovs_ct_copy_action	conntrack.h	/^static inline int ovs_ct_copy_action(struct net *net, const struct nlattr *nla,$/;"	f
ovs_ct_execute	conntrack.c	/^int ovs_ct_execute(struct net *net, struct sk_buff *skb,$/;"	f
ovs_ct_execute	conntrack.h	/^static inline int ovs_ct_execute(struct net *net, struct sk_buff *skb,$/;"	f
ovs_ct_exit	conntrack.c	/^void ovs_ct_exit(struct net *net)$/;"	f
ovs_ct_exit	conntrack.h	/^static inline void ovs_ct_exit(struct net *net) { }$/;"	f
ovs_ct_expect_find	conntrack.c	/^ovs_ct_expect_find(struct net *net, const struct nf_conntrack_zone *zone,$/;"	f	file:
ovs_ct_fill_key	conntrack.c	/^void ovs_ct_fill_key(const struct sk_buff *skb, struct sw_flow_key *key)$/;"	f
ovs_ct_fill_key	conntrack.h	/^static inline void ovs_ct_fill_key(const struct sk_buff *skb,$/;"	f
ovs_ct_free_action	conntrack.c	/^void ovs_ct_free_action(const struct nlattr *a)$/;"	f
ovs_ct_free_action	conntrack.h	/^static inline void ovs_ct_free_action(const struct nlattr *a) { }$/;"	f
ovs_ct_get_labels	conntrack.c	/^static void ovs_ct_get_labels(const struct nf_conn *ct,$/;"	f	file:
ovs_ct_get_mark	conntrack.c	/^static u32 ovs_ct_get_mark(const struct nf_conn *ct)$/;"	f	file:
ovs_ct_get_state	conntrack.c	/^static u8 ovs_ct_get_state(enum ip_conntrack_info ctinfo)$/;"	f	file:
ovs_ct_helper	conntrack.c	/^static int ovs_ct_helper(struct sk_buff *skb, u16 proto)$/;"	f	file:
ovs_ct_init	conntrack.c	/^void ovs_ct_init(struct net *net)$/;"	f
ovs_ct_init	conntrack.h	/^static inline void ovs_ct_init(struct net *net) { }$/;"	f
ovs_ct_len_tbl	conntrack.c	/^struct ovs_ct_len_tbl {$/;"	s	file:
ovs_ct_lookup	conntrack.c	/^static int ovs_ct_lookup(struct net *net, struct sw_flow_key *key,$/;"	f	file:
ovs_ct_put_key	conntrack.c	/^int ovs_ct_put_key(const struct sw_flow_key *key, struct sk_buff *skb)$/;"	f
ovs_ct_put_key	conntrack.h	/^static inline int ovs_ct_put_key(const struct sw_flow_key *key,$/;"	f
ovs_ct_set_labels	conntrack.c	/^static int ovs_ct_set_labels(struct sk_buff *skb, struct sw_flow_key *key,$/;"	f	file:
ovs_ct_set_mark	conntrack.c	/^static int ovs_ct_set_mark(struct sk_buff *skb, struct sw_flow_key *key,$/;"	f	file:
ovs_ct_update_key	conntrack.c	/^static void ovs_ct_update_key(const struct sk_buff *skb,$/;"	f	file:
ovs_ct_verify	conntrack.c	/^bool ovs_ct_verify(struct net *net, enum ovs_key_attr attr)$/;"	f
ovs_ct_verify	conntrack.h	/^static inline bool ovs_ct_verify(struct net *net, int attr)$/;"	f
ovs_dp_change	datapath.c	/^static void ovs_dp_change(struct datapath *dp, struct nlattr *a[])$/;"	f	file:
ovs_dp_cmd_alloc_info	datapath.c	/^static struct sk_buff *ovs_dp_cmd_alloc_info(struct genl_info *info)$/;"	f	file:
ovs_dp_cmd_del	datapath.c	/^static int ovs_dp_cmd_del(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_dp_cmd_dump	datapath.c	/^static int ovs_dp_cmd_dump(struct sk_buff *skb, struct netlink_callback *cb)$/;"	f	file:
ovs_dp_cmd_fill_info	datapath.c	/^static int ovs_dp_cmd_fill_info(struct datapath *dp, struct sk_buff *skb,$/;"	f	file:
ovs_dp_cmd_get	datapath.c	/^static int ovs_dp_cmd_get(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_dp_cmd_msg_size	datapath.c	/^static size_t ovs_dp_cmd_msg_size(void)$/;"	f	file:
ovs_dp_cmd_new	datapath.c	/^static int ovs_dp_cmd_new(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_dp_cmd_set	datapath.c	/^static int ovs_dp_cmd_set(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_dp_datapath_multicast_group	datapath.c	/^static const struct genl_multicast_group ovs_dp_datapath_multicast_group = {$/;"	v	typeref:struct:genl_multicast_group	file:
ovs_dp_detach_port	datapath.c	/^void ovs_dp_detach_port(struct vport *p)$/;"	f
ovs_dp_device_notifier	dp_notify.c	/^struct notifier_block ovs_dp_device_notifier = {$/;"	v	typeref:struct:notifier_block
ovs_dp_flow_multicast_group	datapath.c	/^static const struct genl_multicast_group ovs_dp_flow_multicast_group = {$/;"	v	typeref:struct:genl_multicast_group	file:
ovs_dp_get_net	datapath.h	/^static inline struct net *ovs_dp_get_net(const struct datapath *dp)$/;"	f
ovs_dp_name	datapath.c	/^const char *ovs_dp_name(const struct datapath *dp)$/;"	f
ovs_dp_notify_wq	dp_notify.c	/^void ovs_dp_notify_wq(struct work_struct *work)$/;"	f
ovs_dp_process_packet	datapath.c	/^void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)$/;"	f
ovs_dp_reset_user_features	datapath.c	/^static void ovs_dp_reset_user_features(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_dp_set_net	datapath.h	/^static inline void ovs_dp_set_net(struct datapath *dp, struct net *net)$/;"	f
ovs_dp_upcall	datapath.c	/^int ovs_dp_upcall(struct datapath *dp, struct sk_buff *skb,$/;"	f
ovs_dp_vport_multicast_group	datapath.c	/^static const struct genl_multicast_group ovs_dp_vport_multicast_group = {$/;"	v	typeref:struct:genl_multicast_group	file:
ovs_dst_get_mtu	actions.c	/^ovs_dst_get_mtu(const struct dst_entry *dst)$/;"	f	file:
ovs_dst_ops	actions.c	/^static struct dst_ops ovs_dst_ops = {$/;"	v	typeref:struct:dst_ops	file:
ovs_execute_actions	actions.c	/^int ovs_execute_actions(struct datapath *dp, struct sk_buff *skb,$/;"	f
ovs_exit_net	datapath.c	/^static void __net_exit ovs_exit_net(struct net *dnet)$/;"	f	file:
ovs_flow_alloc	flow_table.c	/^struct sw_flow *ovs_flow_alloc(void)$/;"	f
ovs_flow_cmd_alloc_info	datapath.c	/^static struct sk_buff *ovs_flow_cmd_alloc_info(const struct sw_flow_actions *acts,$/;"	f	file:
ovs_flow_cmd_build_info	datapath.c	/^static struct sk_buff *ovs_flow_cmd_build_info(const struct sw_flow *flow,$/;"	f	file:
ovs_flow_cmd_del	datapath.c	/^static int ovs_flow_cmd_del(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_flow_cmd_dump	datapath.c	/^static int ovs_flow_cmd_dump(struct sk_buff *skb, struct netlink_callback *cb)$/;"	f	file:
ovs_flow_cmd_fill_actions	datapath.c	/^static int ovs_flow_cmd_fill_actions(const struct sw_flow *flow,$/;"	f	file:
ovs_flow_cmd_fill_info	datapath.c	/^static int ovs_flow_cmd_fill_info(const struct sw_flow *flow, int dp_ifindex,$/;"	f	file:
ovs_flow_cmd_fill_stats	datapath.c	/^static int ovs_flow_cmd_fill_stats(const struct sw_flow *flow,$/;"	f	file:
ovs_flow_cmd_get	datapath.c	/^static int ovs_flow_cmd_get(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_flow_cmd_msg_size	datapath.c	/^static size_t ovs_flow_cmd_msg_size(const struct sw_flow_actions *acts,$/;"	f	file:
ovs_flow_cmd_new	datapath.c	/^static int ovs_flow_cmd_new(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_flow_cmd_set	datapath.c	/^static int ovs_flow_cmd_set(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_flow_cmp	flow_table.c	/^bool ovs_flow_cmp(const struct sw_flow *flow, const struct sw_flow_match *match)$/;"	f
ovs_flow_cmp_ufid	flow_table.c	/^static bool ovs_flow_cmp_ufid(const struct sw_flow *flow,$/;"	f	file:
ovs_flow_cmp_unmasked_key	flow_table.c	/^static bool ovs_flow_cmp_unmasked_key(const struct sw_flow *flow,$/;"	f	file:
ovs_flow_exit	flow_table.c	/^void ovs_flow_exit(void)$/;"	f
ovs_flow_free	flow_table.c	/^void ovs_flow_free(struct sw_flow *flow, bool deferred)$/;"	f
ovs_flow_hash	flow.h	/^	u32 ovs_flow_hash;		\/* Datapath computed hash value.  *\/$/;"	m	struct:sw_flow_key
ovs_flow_init	flow_table.c	/^int ovs_flow_init(void)$/;"	f
ovs_flow_key_extract	flow.c	/^int ovs_flow_key_extract(const struct ip_tunnel_info *tun_info,$/;"	f
ovs_flow_key_extract_userspace	flow.c	/^int ovs_flow_key_extract_userspace(struct net *net, const struct nlattr *attr,$/;"	f
ovs_flow_key_update	flow.c	/^int ovs_flow_key_update(struct sk_buff *skb, struct sw_flow_key *key)$/;"	f
ovs_flow_mask_key	flow_table.c	/^void ovs_flow_mask_key(struct sw_flow_key *dst, const struct sw_flow_key *src,$/;"	f
ovs_flow_stats_clear	flow.c	/^void ovs_flow_stats_clear(struct sw_flow *flow)$/;"	f
ovs_flow_stats_get	flow.c	/^void ovs_flow_stats_get(const struct sw_flow *flow,$/;"	f
ovs_flow_stats_update	flow.c	/^void ovs_flow_stats_update(struct sw_flow *flow, __be16 tcp_flags,$/;"	f
ovs_flow_tbl_count	flow_table.c	/^int ovs_flow_tbl_count(const struct flow_table *table)$/;"	f
ovs_flow_tbl_destroy	flow_table.c	/^void ovs_flow_tbl_destroy(struct flow_table *table)$/;"	f
ovs_flow_tbl_dump_next	flow_table.c	/^struct sw_flow *ovs_flow_tbl_dump_next(struct table_instance *ti,$/;"	f
ovs_flow_tbl_flush	flow_table.c	/^int ovs_flow_tbl_flush(struct flow_table *flow_table)$/;"	f
ovs_flow_tbl_init	flow_table.c	/^int ovs_flow_tbl_init(struct flow_table *table)$/;"	f
ovs_flow_tbl_insert	flow_table.c	/^int ovs_flow_tbl_insert(struct flow_table *table, struct sw_flow *flow,$/;"	f
ovs_flow_tbl_lookup	flow_table.c	/^struct sw_flow *ovs_flow_tbl_lookup(struct flow_table *tbl,$/;"	f
ovs_flow_tbl_lookup_exact	flow_table.c	/^struct sw_flow *ovs_flow_tbl_lookup_exact(struct flow_table *tbl,$/;"	f
ovs_flow_tbl_lookup_stats	flow_table.c	/^struct sw_flow *ovs_flow_tbl_lookup_stats(struct flow_table *tbl,$/;"	f
ovs_flow_tbl_lookup_ufid	flow_table.c	/^struct sw_flow *ovs_flow_tbl_lookup_ufid(struct flow_table *tbl,$/;"	f
ovs_flow_tbl_num_masks	flow_table.c	/^int ovs_flow_tbl_num_masks(const struct flow_table *table)$/;"	f
ovs_flow_tbl_remove	flow_table.c	/^void ovs_flow_tbl_remove(struct flow_table *table, struct sw_flow *flow)$/;"	f
ovs_flow_used_time	flow.c	/^u64 ovs_flow_used_time(unsigned long flow_jiffies)$/;"	f
ovs_frag_data	actions.c	/^struct ovs_frag_data {$/;"	s	file:
ovs_fragment	actions.c	/^static void ovs_fragment(struct net *net, struct vport *vport,$/;"	f	file:
ovs_geneve_tnl_exit	vport-geneve.c	/^module_exit(ovs_geneve_tnl_exit);$/;"	v
ovs_geneve_tnl_exit	vport-geneve.c	/^static void __exit ovs_geneve_tnl_exit(void)$/;"	f	file:
ovs_geneve_tnl_init	vport-geneve.c	/^module_init(ovs_geneve_tnl_init);$/;"	v
ovs_geneve_tnl_init	vport-geneve.c	/^static int __init ovs_geneve_tnl_init(void)$/;"	f	file:
ovs_geneve_vport_ops	vport-geneve.c	/^static struct vport_ops ovs_geneve_vport_ops = {$/;"	v	typeref:struct:vport_ops	file:
ovs_geneve_vport_ops	vport-geneve.c	/^static struct vport_ops ovs_geneve_vport_ops;$/;"	v	typeref:struct:vport_ops	file:
ovs_gre_tnl_exit	vport-gre.c	/^module_exit(ovs_gre_tnl_exit);$/;"	v
ovs_gre_tnl_exit	vport-gre.c	/^static void __exit ovs_gre_tnl_exit(void)$/;"	f	file:
ovs_gre_tnl_init	vport-gre.c	/^module_init(ovs_gre_tnl_init);$/;"	v
ovs_gre_tnl_init	vport-gre.c	/^static int __init ovs_gre_tnl_init(void)$/;"	f	file:
ovs_gre_vport_ops	vport-gre.c	/^static struct vport_ops ovs_gre_vport_ops = {$/;"	v	typeref:struct:vport_ops	file:
ovs_gre_vport_ops	vport-gre.c	/^static struct vport_ops ovs_gre_vport_ops;$/;"	v	typeref:struct:vport_ops	file:
ovs_identifier_is_key	flow.h	/^static inline bool ovs_identifier_is_key(const struct sw_flow_id *sfid)$/;"	f
ovs_identifier_is_ufid	flow.h	/^static inline bool ovs_identifier_is_ufid(const struct sw_flow_id *sfid)$/;"	f
ovs_init_net	datapath.c	/^static int __net_init ovs_init_net(struct net *net)$/;"	f	file:
ovs_internal_dev_get_vport	vport-internal_dev.c	/^struct vport *ovs_internal_dev_get_vport(struct net_device *netdev)$/;"	f
ovs_internal_dev_rtnl_link_register	vport-internal_dev.c	/^int ovs_internal_dev_rtnl_link_register(void)$/;"	f
ovs_internal_dev_rtnl_link_unregister	vport-internal_dev.c	/^void ovs_internal_dev_rtnl_link_unregister(void)$/;"	f
ovs_internal_vport_ops	vport-internal_dev.c	/^static struct vport_ops ovs_internal_vport_ops = {$/;"	v	typeref:struct:vport_ops	file:
ovs_internal_vport_ops	vport-internal_dev.c	/^static struct vport_ops ovs_internal_vport_ops;$/;"	v	typeref:struct:vport_ops	file:
ovs_is_internal_dev	vport-internal_dev.c	/^int ovs_is_internal_dev(const struct net_device *netdev)$/;"	f
ovs_key_attr_size	flow_netlink.c	/^size_t ovs_key_attr_size(void)$/;"	f
ovs_key_from_nlattrs	flow_netlink.c	/^static int ovs_key_from_nlattrs(struct net *net, struct sw_flow_match *match,$/;"	f	file:
ovs_key_lens	flow_netlink.c	/^static const struct ovs_len_tbl ovs_key_lens[OVS_KEY_ATTR_MAX + 1] = {$/;"	v	typeref:struct:ovs_len_tbl	file:
ovs_len_tbl	flow_netlink.c	/^struct ovs_len_tbl {$/;"	s	file:
ovs_lock	datapath.c	/^void ovs_lock(void)$/;"	f
ovs_lookup_vport	datapath.c	/^struct vport *ovs_lookup_vport(const struct datapath *dp, u16 port_no)$/;"	f
ovs_match_init	flow_netlink.c	/^void ovs_match_init(struct sw_flow_match *match,$/;"	f
ovs_must_notify	datapath.c	/^static bool ovs_must_notify(struct genl_family *family, struct genl_info *info,$/;"	f	file:
ovs_net	datapath.h	/^struct ovs_net {$/;"	s
ovs_net_id	datapath.c	/^EXPORT_SYMBOL_GPL(ovs_net_id);$/;"	v
ovs_net_ops	datapath.c	/^static struct pernet_operations ovs_net_ops = {$/;"	v	typeref:struct:pernet_operations	file:
ovs_netdev_detach_dev	vport-netdev.c	/^EXPORT_SYMBOL_GPL(ovs_netdev_detach_dev);$/;"	v
ovs_netdev_detach_dev	vport-netdev.c	/^void ovs_netdev_detach_dev(struct vport *vport)$/;"	f
ovs_netdev_exit	vport-netdev.c	/^void ovs_netdev_exit(void)$/;"	f
ovs_netdev_get_vport	vport-netdev.c	/^struct vport *ovs_netdev_get_vport(struct net_device *dev)$/;"	f
ovs_netdev_init	vport-netdev.c	/^int __init ovs_netdev_init(void)$/;"	f
ovs_netdev_link	vport-netdev.c	/^EXPORT_SYMBOL_GPL(ovs_netdev_link);$/;"	v
ovs_netdev_link	vport-netdev.c	/^struct vport *ovs_netdev_link(struct vport *vport, const char *name)$/;"	f
ovs_netdev_tunnel_destroy	vport-netdev.c	/^EXPORT_SYMBOL_GPL(ovs_netdev_tunnel_destroy);$/;"	v
ovs_netdev_tunnel_destroy	vport-netdev.c	/^void ovs_netdev_tunnel_destroy(struct vport *vport)$/;"	f
ovs_netdev_vport_ops	vport-netdev.c	/^static struct vport_ops ovs_netdev_vport_ops = {$/;"	v	typeref:struct:vport_ops	file:
ovs_netdev_vport_ops	vport-netdev.c	/^static struct vport_ops ovs_netdev_vport_ops;$/;"	v	typeref:struct:vport_ops	file:
ovs_nla_add_action	flow_netlink.c	/^int ovs_nla_add_action(struct sw_flow_actions **sfa, int attrtype, void *data,$/;"	f
ovs_nla_copy_actions	flow_netlink.c	/^int ovs_nla_copy_actions(struct net *net, const struct nlattr *attr,$/;"	f
ovs_nla_free_flow_actions	flow_netlink.c	/^void ovs_nla_free_flow_actions(struct sw_flow_actions *sf_acts)$/;"	f
ovs_nla_free_flow_actions_rcu	flow_netlink.c	/^void ovs_nla_free_flow_actions_rcu(struct sw_flow_actions *sf_acts)$/;"	f
ovs_nla_free_set_action	flow_netlink.c	/^static void ovs_nla_free_set_action(const struct nlattr *a)$/;"	f	file:
ovs_nla_get_flow_metadata	flow_netlink.c	/^int ovs_nla_get_flow_metadata(struct net *net, const struct nlattr *attr,$/;"	f
ovs_nla_get_identifier	flow_netlink.c	/^int ovs_nla_get_identifier(struct sw_flow_id *sfid, const struct nlattr *ufid,$/;"	f
ovs_nla_get_match	flow_netlink.c	/^int ovs_nla_get_match(struct net *net, struct sw_flow_match *match,$/;"	f
ovs_nla_get_ufid	flow_netlink.c	/^bool ovs_nla_get_ufid(struct sw_flow_id *sfid, const struct nlattr *attr,$/;"	f
ovs_nla_get_ufid_flags	flow_netlink.c	/^u32 ovs_nla_get_ufid_flags(const struct nlattr *attr)$/;"	f
ovs_nla_put_actions	flow_netlink.c	/^int ovs_nla_put_actions(const struct nlattr *attr, int len, struct sk_buff *skb)$/;"	f
ovs_nla_put_identifier	flow_netlink.c	/^int ovs_nla_put_identifier(const struct sw_flow *flow, struct sk_buff *skb)$/;"	f
ovs_nla_put_key	flow_netlink.c	/^int ovs_nla_put_key(const struct sw_flow_key *swkey,$/;"	f
ovs_nla_put_mask	flow_netlink.c	/^int ovs_nla_put_mask(const struct sw_flow *flow, struct sk_buff *skb)$/;"	f
ovs_nla_put_masked_key	flow_netlink.c	/^int ovs_nla_put_masked_key(const struct sw_flow *flow, struct sk_buff *skb)$/;"	f
ovs_nla_put_tunnel_info	flow_netlink.c	/^int ovs_nla_put_tunnel_info(struct sk_buff *skb,$/;"	f
ovs_notify	datapath.c	/^static void ovs_notify(struct genl_family *family,$/;"	f	file:
ovs_packet_cmd_execute	datapath.c	/^static int ovs_packet_cmd_execute(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_skb_cb	datapath.h	/^struct ovs_skb_cb {$/;"	s
ovs_skb_postpush_rcsum	vport.h	/^static inline void ovs_skb_postpush_rcsum(struct sk_buff *skb,$/;"	f
ovs_tun_key_attr_size	flow_netlink.c	/^size_t ovs_tun_key_attr_size(void)$/;"	f
ovs_tunnel_info	flow.h	/^struct ovs_tunnel_info {$/;"	s
ovs_tunnel_key_lens	flow_netlink.c	/^static const struct ovs_len_tbl ovs_tunnel_key_lens[OVS_TUNNEL_KEY_ATTR_MAX + 1] = {$/;"	v	typeref:struct:ovs_len_tbl	file:
ovs_unlock	datapath.c	/^void ovs_unlock(void)$/;"	f
ovs_vport_add	vport.c	/^struct vport *ovs_vport_add(const struct vport_parms *parms)$/;"	f
ovs_vport_alloc	vport.c	/^EXPORT_SYMBOL_GPL(ovs_vport_alloc);$/;"	v
ovs_vport_alloc	vport.c	/^struct vport *ovs_vport_alloc(int priv_size, const struct vport_ops *ops,$/;"	f
ovs_vport_cmd_alloc_info	datapath.c	/^static struct sk_buff *ovs_vport_cmd_alloc_info(void)$/;"	f	file:
ovs_vport_cmd_build_info	datapath.c	/^struct sk_buff *ovs_vport_cmd_build_info(struct vport *vport, u32 portid,$/;"	f
ovs_vport_cmd_del	datapath.c	/^static int ovs_vport_cmd_del(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_vport_cmd_dump	datapath.c	/^static int ovs_vport_cmd_dump(struct sk_buff *skb, struct netlink_callback *cb)$/;"	f	file:
ovs_vport_cmd_fill_info	datapath.c	/^static int ovs_vport_cmd_fill_info(struct vport *vport, struct sk_buff *skb,$/;"	f	file:
ovs_vport_cmd_get	datapath.c	/^static int ovs_vport_cmd_get(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_vport_cmd_new	datapath.c	/^static int ovs_vport_cmd_new(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_vport_cmd_set	datapath.c	/^static int ovs_vport_cmd_set(struct sk_buff *skb, struct genl_info *info)$/;"	f	file:
ovs_vport_deferred_free	vport.c	/^EXPORT_SYMBOL_GPL(ovs_vport_deferred_free);$/;"	v
ovs_vport_deferred_free	vport.c	/^void ovs_vport_deferred_free(struct vport *vport)$/;"	f
ovs_vport_del	vport.c	/^void ovs_vport_del(struct vport *vport)$/;"	f
ovs_vport_exit	vport.c	/^void ovs_vport_exit(void)$/;"	f
ovs_vport_find_upcall_portid	vport.c	/^u32 ovs_vport_find_upcall_portid(const struct vport *vport, struct sk_buff *skb)$/;"	f
ovs_vport_free	vport.c	/^EXPORT_SYMBOL_GPL(ovs_vport_free);$/;"	v
ovs_vport_free	vport.c	/^void ovs_vport_free(struct vport *vport)$/;"	f
ovs_vport_get_options	vport.c	/^int ovs_vport_get_options(const struct vport *vport, struct sk_buff *skb)$/;"	f
ovs_vport_get_stats	vport.c	/^void ovs_vport_get_stats(struct vport *vport, struct ovs_vport_stats *stats)$/;"	f
ovs_vport_get_upcall_portids	vport.c	/^int ovs_vport_get_upcall_portids(const struct vport *vport,$/;"	f
ovs_vport_init	vport.c	/^int ovs_vport_init(void)$/;"	f
ovs_vport_locate	vport.c	/^struct vport *ovs_vport_locate(const struct net *net, const char *name)$/;"	f
ovs_vport_lookup	vport.c	/^static struct vport_ops *ovs_vport_lookup(const struct vport_parms *parms)$/;"	f	file:
ovs_vport_name	vport.h	/^static inline const char *ovs_vport_name(struct vport *vport)$/;"	f
ovs_vport_ops_register	vport.h	201;"	d
ovs_vport_ops_unregister	vport.c	/^EXPORT_SYMBOL_GPL(ovs_vport_ops_unregister);$/;"	v
ovs_vport_ops_unregister	vport.c	/^void ovs_vport_ops_unregister(struct vport_ops *ops)$/;"	f
ovs_vport_output	actions.c	/^static int ovs_vport_output(struct net *net, struct sock *sk, struct sk_buff *skb)$/;"	f	file:
ovs_vport_ovsl	datapath.h	/^static inline struct vport *ovs_vport_ovsl(const struct datapath *dp, int port_no)$/;"	f
ovs_vport_ovsl_rcu	datapath.h	/^static inline struct vport *ovs_vport_ovsl_rcu(const struct datapath *dp, int port_no)$/;"	f
ovs_vport_rcu	datapath.h	/^static inline struct vport *ovs_vport_rcu(const struct datapath *dp, int port_no)$/;"	f
ovs_vport_receive	vport.c	/^EXPORT_SYMBOL_GPL(ovs_vport_receive);$/;"	v
ovs_vport_receive	vport.c	/^int ovs_vport_receive(struct vport *vport, struct sk_buff *skb,$/;"	f
ovs_vport_send	vport.c	/^void ovs_vport_send(struct vport *vport, struct sk_buff *skb)$/;"	f
ovs_vport_set_options	vport.c	/^int ovs_vport_set_options(struct vport *vport, struct nlattr *options)$/;"	f
ovs_vport_set_upcall_portids	vport.c	/^int ovs_vport_set_upcall_portids(struct vport *vport, const struct nlattr *ids)$/;"	f
ovs_vxlan_ext_key_lens	flow_netlink.c	/^static const struct ovs_len_tbl ovs_vxlan_ext_key_lens[OVS_VXLAN_EXT_MAX + 1] = {$/;"	v	typeref:struct:ovs_len_tbl	file:
ovs_vxlan_netdev_vport_ops	vport-vxlan.c	/^static struct vport_ops ovs_vxlan_netdev_vport_ops = {$/;"	v	typeref:struct:vport_ops	file:
ovs_vxlan_netdev_vport_ops	vport-vxlan.c	/^static struct vport_ops ovs_vxlan_netdev_vport_ops;$/;"	v	typeref:struct:vport_ops	file:
ovs_vxlan_tnl_exit	vport-vxlan.c	/^module_exit(ovs_vxlan_tnl_exit);$/;"	v
ovs_vxlan_tnl_exit	vport-vxlan.c	/^static void __exit ovs_vxlan_tnl_exit(void)$/;"	f	file:
ovs_vxlan_tnl_init	vport-vxlan.c	/^module_init(ovs_vxlan_tnl_init);$/;"	v
ovs_vxlan_tnl_init	vport-vxlan.c	/^static int __init ovs_vxlan_tnl_init(void)$/;"	f	file:
ovsl_dereference	datapath.h	152;"	d
owner	vport.h	/^	struct module *owner;$/;"	m	struct:vport_ops	typeref:struct:vport_ops::module
packet_count	flow.h	/^	u64 packet_count;		\/* Number of packets matched. *\/$/;"	m	struct:flow_stats
packet_length	vport.c	/^static unsigned int packet_length(const struct sk_buff *skb)$/;"	f	file:
packet_policy	datapath.c	/^static const struct nla_policy packet_policy[OVS_PACKET_ATTR_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
pad_packet	datapath.c	/^static void pad_packet(struct datapath *dp, struct sk_buff *skb)$/;"	f	file:
parse_ct	conntrack.c	/^static int parse_ct(const struct nlattr *attr, struct ovs_conntrack_info *info,$/;"	f	file:
parse_ethertype	flow.c	/^static __be16 parse_ethertype(struct sk_buff *skb)$/;"	f	file:
parse_flow_mask_nlattrs	flow_netlink.c	/^static int parse_flow_mask_nlattrs(const struct nlattr *attr,$/;"	f	file:
parse_flow_nlattrs	flow_netlink.c	/^static int parse_flow_nlattrs(const struct nlattr *attr,$/;"	f	file:
parse_icmpv6	flow.c	/^static int parse_icmpv6(struct sk_buff *skb, struct sw_flow_key *key,$/;"	f	file:
parse_ipv6hdr	flow.c	/^static int parse_ipv6hdr(struct sk_buff *skb, struct sw_flow_key *key)$/;"	f	file:
parse_vlan	flow.c	/^static int parse_vlan(struct sk_buff *skb, struct sw_flow_key *key)$/;"	f	file:
phy	flow.h	/^	} __packed phy; \/* Safe when right after 'tun_key'. *\/$/;"	m	struct:sw_flow_key	typeref:struct:sw_flow_key::__anon1
pkt_key	actions.c	/^	struct sw_flow_key pkt_key;$/;"	m	struct:deferred_action	typeref:struct:deferred_action::sw_flow_key	file:
pop_mpls	actions.c	/^static int pop_mpls(struct sk_buff *skb, struct sw_flow_key *key,$/;"	f	file:
pop_vlan	actions.c	/^static int pop_vlan(struct sk_buff *skb, struct sw_flow_key *key)$/;"	f	file:
port_no	vport.h	/^	u16 port_no;$/;"	m	struct:vport
port_no	vport.h	/^	u16 port_no;$/;"	m	struct:vport_parms
portid	datapath.h	/^	u32 portid;$/;"	m	struct:dp_upcall_info
ports	datapath.h	/^	struct hlist_head *ports;$/;"	m	struct:datapath	typeref:struct:datapath::hlist_head
pr_fmt	actions.c	19;"	d	file:
pr_fmt	datapath.c	19;"	d	file:
pr_fmt	flow_netlink.c	19;"	d	file:
pr_fmt	vport-geneve.c	10;"	d	file:
pr_fmt	vport-gre.c	19;"	d	file:
pr_fmt	vport-netdev.c	19;"	d	file:
prepare_frag	actions.c	/^static void prepare_frag(struct vport *vport, struct sk_buff *skb)$/;"	f	file:
priority	flow.h	/^		u32	priority;	\/* Packet QoS priority. *\/$/;"	m	struct:sw_flow_key::__anon1
process_deferred_actions	actions.c	/^static void process_deferred_actions(struct datapath *dp)$/;"	f	file:
proto	flow.h	/^			u8     proto;	\/* IP protocol or lower 8 bits of ARP opcode. *\/$/;"	m	struct:sw_flow_key::__anon3::__anon5
push_mpls	actions.c	/^static int push_mpls(struct sk_buff *skb, struct sw_flow_key *key,$/;"	f	file:
push_vlan	actions.c	/^static int push_vlan(struct sk_buff *skb, struct sw_flow_key *key,$/;"	f	file:
queue_gso_packets	datapath.c	/^static int queue_gso_packets(struct datapath *dp, struct sk_buff *skb,$/;"	f	file:
queue_userspace_packet	datapath.c	/^static int queue_userspace_packet(struct datapath *dp, struct sk_buff *skb,$/;"	f	file:
range	flow.h	/^	struct sw_flow_key_range range;$/;"	m	struct:sw_flow_mask	typeref:struct:sw_flow_mask::sw_flow_key_range
range	flow.h	/^	struct sw_flow_key_range range;$/;"	m	struct:sw_flow_match	typeref:struct:sw_flow_match::sw_flow_key_range
range_n_bytes	flow_table.c	/^static u16 range_n_bytes(const struct sw_flow_key_range *range)$/;"	f	file:
rcu	datapath.h	/^	struct rcu_head rcu;$/;"	m	struct:datapath	typeref:struct:datapath::rcu_head
rcu	flow.h	/^	struct rcu_head rcu;$/;"	m	struct:sw_flow	typeref:struct:sw_flow::rcu_head
rcu	flow.h	/^	struct rcu_head rcu;$/;"	m	struct:sw_flow_actions	typeref:struct:sw_flow_actions::rcu_head
rcu	flow.h	/^	struct rcu_head rcu;$/;"	m	struct:sw_flow_mask	typeref:struct:sw_flow_mask::rcu_head
rcu	flow_table.h	/^	struct rcu_head rcu;$/;"	m	struct:table_instance	typeref:struct:table_instance::rcu_head
rcu	vport.h	/^	struct rcu_head rcu;$/;"	m	struct:vport	typeref:struct:vport::rcu_head
rcu	vport.h	/^	struct rcu_head rcu;$/;"	m	struct:vport_portids	typeref:struct:vport_portids::rcu_head
rcu_dereference_ovsl	datapath.h	154;"	d
rcu_free_flow_callback	flow_table.c	/^static void rcu_free_flow_callback(struct rcu_head *rcu)$/;"	f	file:
recirc_id	flow.h	/^	u32 recirc_id;			\/* Recirculation ID.  *\/$/;"	m	struct:sw_flow_key
ref_count	flow.h	/^	int ref_count;$/;"	m	struct:sw_flow_mask
reserve_sfa_size	flow_netlink.c	/^static struct nlattr *reserve_sfa_size(struct sw_flow_actions **sfa,$/;"	f	file:
rn_ids	vport.h	/^	struct reciprocal_value rn_ids;$/;"	m	struct:vport_portids	typeref:struct:vport_portids::reciprocal_value
sample	actions.c	/^static int sample(struct datapath *dp, struct sk_buff *skb,$/;"	f	file:
sample_action_to_attr	flow_netlink.c	/^static int sample_action_to_attr(const struct nlattr *attr, struct sk_buff *skb)$/;"	f	file:
sctphdr_ok	flow.c	/^static bool sctphdr_ok(struct sk_buff *skb)$/;"	f	file:
send	vport.h	/^	netdev_tx_t (*send) (struct sk_buff *skb);$/;"	m	struct:vport_ops
set_action_to_attr	flow_netlink.c	/^static int set_action_to_attr(const struct nlattr *a, struct sk_buff *skb)$/;"	f	file:
set_eth_addr	actions.c	/^static int set_eth_addr(struct sk_buff *skb, struct sw_flow_key *flow_key,$/;"	f	file:
set_ip_addr	actions.c	/^static void set_ip_addr(struct sk_buff *skb, struct iphdr *nh,$/;"	f	file:
set_ip_ttl	actions.c	/^static void set_ip_ttl(struct sk_buff *skb, struct iphdr *nh, u8 new_ttl,$/;"	f	file:
set_ipv4	actions.c	/^static int set_ipv4(struct sk_buff *skb, struct sw_flow_key *flow_key,$/;"	f	file:
set_ipv6	actions.c	/^static int set_ipv6(struct sk_buff *skb, struct sw_flow_key *flow_key,$/;"	f	file:
set_ipv6_addr	actions.c	/^static void set_ipv6_addr(struct sk_buff *skb, u8 l4_proto,$/;"	f	file:
set_ipv6_fl	actions.c	/^static void set_ipv6_fl(struct ipv6hdr *nh, u32 fl, u32 mask)$/;"	f	file:
set_mpls	actions.c	/^static int set_mpls(struct sk_buff *skb, struct sw_flow_key *flow_key,$/;"	f	file:
set_options	vport.h	/^	int (*set_options)(struct vport *, struct nlattr *);$/;"	m	struct:vport_ops
set_sctp	actions.c	/^static int set_sctp(struct sk_buff *skb, struct sw_flow_key *flow_key,$/;"	f	file:
set_tcp	actions.c	/^static int set_tcp(struct sk_buff *skb, struct sw_flow_key *flow_key,$/;"	f	file:
set_tp_port	actions.c	/^static void set_tp_port(struct sk_buff *skb, __be16 *port,$/;"	f	file:
set_udp	actions.c	/^static int set_udp(struct sk_buff *skb, struct sw_flow_key *flow_key,$/;"	f	file:
sf_acts	flow.h	/^	struct sw_flow_actions __rcu *sf_acts;$/;"	m	struct:sw_flow	typeref:struct:sw_flow::__rcu
sha	flow.h	/^				u8 sha[ETH_ALEN];	\/* ARP source hardware address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon8::__anon10
should_fill_actions	datapath.c	/^static bool should_fill_actions(uint32_t ufid_flags)$/;"	f	file:
should_fill_key	datapath.c	/^static bool should_fill_key(const struct sw_flow_id *sfid, uint32_t ufid_flags)$/;"	f	file:
should_fill_mask	datapath.c	/^static bool should_fill_mask(uint32_t ufid_flags)$/;"	f	file:
skb	actions.c	/^	struct sk_buff *skb;$/;"	m	struct:deferred_action	typeref:struct:deferred_action::sk_buff	file:
skb_mark	flow.h	/^		u32	skb_mark;	\/* SKB mark. *\/$/;"	m	struct:sw_flow_key::__anon1
skb_nfct_cached	conntrack.c	/^static bool skb_nfct_cached(const struct net *net, const struct sk_buff *skb,$/;"	f	file:
sll	flow.h	/^				u8 sll[ETH_ALEN];	\/* ND source link layer address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon11::__anon13
src	flow.h	/^				__be32 src;	\/* IP source address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon8::__anon9
src	flow.h	/^				struct in6_addr src;	\/* IPv6 source address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon11::__anon12	typeref:struct:sw_flow_key::__anon7::__anon11::__anon12::in6_addr
src	flow.h	/^		__be16 src;		\/* TCP\/UDP\/SCTP source port. *\/$/;"	m	struct:sw_flow_key::__anon6
src	flow.h	/^		u8     src[ETH_ALEN];	\/* Ethernet source address. *\/$/;"	m	struct:sw_flow_key::__anon2
start	flow.h	/^	unsigned short int start;$/;"	m	struct:sw_flow_key_range
state	flow.h	/^		u8 state;$/;"	m	struct:sw_flow_key::__anon14
stats	flow.h	/^	struct flow_stats __rcu *stats[]; \/* One for each NUMA node.  First one$/;"	m	struct:sw_flow	typeref:struct:sw_flow::__rcu
stats_last_writer	flow.h	/^	int stats_last_writer;		\/* NUMA-node id of the last writer on$/;"	m	struct:sw_flow
stats_percpu	datapath.h	/^	struct dp_stats_percpu __percpu *stats_percpu;$/;"	m	struct:datapath	typeref:struct:datapath::__percpu
sw_flow	flow.h	/^struct sw_flow {$/;"	s
sw_flow_actions	flow.h	/^struct sw_flow_actions {$/;"	s
sw_flow_id	flow.h	/^struct sw_flow_id {$/;"	s
sw_flow_key	flow.h	/^struct sw_flow_key {$/;"	s
sw_flow_key_range	flow.h	/^struct sw_flow_key_range {$/;"	s
sw_flow_mask	flow.h	/^struct sw_flow_mask {$/;"	s
sw_flow_match	flow.h	/^struct sw_flow_match {$/;"	s
syncp	datapath.h	/^	struct u64_stats_sync syncp;$/;"	m	struct:dp_stats_percpu	typeref:struct:dp_stats_percpu::u64_stats_sync
table	datapath.h	/^	struct flow_table table;$/;"	m	struct:datapath	typeref:struct:datapath::flow_table
table_instance	flow_table.h	/^struct table_instance {$/;"	s
table_instance_alloc	flow_table.c	/^static struct table_instance *table_instance_alloc(int new_size)$/;"	f	file:
table_instance_destroy	flow_table.c	/^static void table_instance_destroy(struct table_instance *ti,$/;"	f	file:
table_instance_expand	flow_table.c	/^static struct table_instance *table_instance_expand(struct table_instance *ti,$/;"	f	file:
table_instance_insert	flow_table.c	/^static void table_instance_insert(struct table_instance *ti,$/;"	f	file:
table_instance_rehash	flow_table.c	/^static struct table_instance *table_instance_rehash(struct table_instance *ti,$/;"	f	file:
tail	actions.c	/^	int tail;$/;"	m	struct:action_fifo	file:
target	flow.h	/^				struct in6_addr target;	\/* ND target address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon11::__anon13	typeref:struct:sw_flow_key::__anon7::__anon11::__anon13::in6_addr
tci	flow.h	/^		__be16 tci;		\/* 0 if no VLAN, VLAN_TAG_PRESENT set otherwise. *\/$/;"	m	struct:sw_flow_key::__anon2
tcp_flags	flow.h	/^	__be16 tcp_flags;		\/* Union of seen TCP flags. *\/$/;"	m	struct:flow_stats
tcphdr_ok	flow.c	/^static bool tcphdr_ok(struct sk_buff *skb)$/;"	f	file:
tha	flow.h	/^				u8 tha[ETH_ALEN];	\/* ARP target hardware address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon8::__anon10
ti	flow_table.h	/^	struct table_instance __rcu *ti;$/;"	m	struct:flow_table	typeref:struct:flow_table::__rcu
tll	flow.h	/^				u8 tll[ETH_ALEN];	\/* ND target link layer address. *\/$/;"	m	struct:sw_flow_key::__anon7::__anon11::__anon13
top_lse	flow.h	/^			__be32 top_lse;	\/* top label stack entry *\/$/;"	m	struct:sw_flow_key::__anon3::__anon4
tos	flow.h	/^			u8     tos;	    \/* IP ToS. *\/$/;"	m	struct:sw_flow_key::__anon3::__anon5
tp	flow.h	/^	} tp;$/;"	m	struct:sw_flow_key	typeref:struct:sw_flow_key::__anon6
ttl	flow.h	/^			u8     ttl;	    \/* IP TTL\/hop limit. *\/$/;"	m	struct:sw_flow_key::__anon3::__anon5
tun_dst	flow.h	/^	struct metadata_dst	*tun_dst;$/;"	m	struct:ovs_tunnel_info	typeref:struct:ovs_tunnel_info::metadata_dst
tun_key	flow.h	/^	struct ip_tunnel_key tun_key;	\/* Encapsulating tunnel key. *\/$/;"	m	struct:sw_flow_key	typeref:struct:sw_flow_key::ip_tunnel_key
tun_opts	flow.h	/^	u8 tun_opts[255];$/;"	m	struct:sw_flow_key
tun_opts_len	flow.h	/^	u8 tun_opts_len;$/;"	m	struct:sw_flow_key
tun_proto	flow.h	/^	u8 tun_proto;			\/* Protocol of encapsulating tunnel. *\/$/;"	m	struct:sw_flow_key
type	flow.h	/^		__be16 type;		\/* Ethernet frame type. *\/$/;"	m	struct:sw_flow_key::__anon2
type	vport.h	/^	enum ovs_vport_type type;$/;"	m	struct:vport_ops	typeref:enum:vport_ops::ovs_vport_type
type	vport.h	/^	enum ovs_vport_type type;$/;"	m	struct:vport_parms	typeref:enum:vport_parms::ovs_vport_type
udphdr_ok	flow.c	/^static bool udphdr_ok(struct sk_buff *skb)$/;"	f	file:
ufid	flow.h	/^		u32 ufid[MAX_UFID_LENGTH \/ 4];$/;"	m	union:sw_flow_id::__anon15
ufid_count	flow_table.h	/^	unsigned int ufid_count;$/;"	m	struct:flow_table
ufid_hash	flow_table.c	/^static u32 ufid_hash(const struct sw_flow_id *sfid)$/;"	f	file:
ufid_len	flow.h	/^	u32 ufid_len;$/;"	m	struct:sw_flow_id
ufid_table	flow.h	/^	} flow_table, ufid_table;$/;"	m	struct:sw_flow	typeref:struct:sw_flow::__anon16
ufid_table_instance_insert	flow_table.c	/^static void ufid_table_instance_insert(struct table_instance *ti,$/;"	f	file:
ufid_ti	flow_table.h	/^	struct table_instance __rcu *ufid_ti;$/;"	m	struct:flow_table	typeref:struct:flow_table::__rcu
unmasked_key	flow.h	/^		struct sw_flow_key *unmasked_key;$/;"	m	union:sw_flow_id::__anon15	typeref:struct:sw_flow_id::__anon15::sw_flow_key
upcall_msg_size	datapath.c	/^static size_t upcall_msg_size(const struct dp_upcall_info *upcall_info,$/;"	f	file:
upcall_portids	vport.h	/^	struct nlattr *upcall_portids;$/;"	m	struct:vport_parms	typeref:struct:vport_parms::nlattr
upcall_portids	vport.h	/^	struct vport_portids __rcu *upcall_portids;$/;"	m	struct:vport	typeref:struct:vport::__rcu
update_ip_l4_checksum	actions.c	/^static void update_ip_l4_checksum(struct sk_buff *skb, struct iphdr *nh,$/;"	f	file:
update_ipv6_checksum	actions.c	/^static void update_ipv6_checksum(struct sk_buff *skb, u8 l4_proto,$/;"	f	file:
update_range	flow_netlink.c	/^static void update_range(struct sw_flow_match *match,$/;"	f	file:
used	flow.h	/^	unsigned long used;		\/* Last used time (in jiffies). *\/$/;"	m	struct:flow_stats
user_features	datapath.h	/^	u32 user_features;$/;"	m	struct:datapath
userdata	datapath.h	/^	const struct nlattr *userdata;$/;"	m	struct:dp_upcall_info	typeref:struct:dp_upcall_info::nlattr
validate_and_copy_sample	flow_netlink.c	/^static int validate_and_copy_sample(struct net *net, const struct nlattr *attr,$/;"	f	file:
validate_and_copy_set_tun	flow_netlink.c	/^static int validate_and_copy_set_tun(const struct nlattr *attr,$/;"	f	file:
validate_geneve_opts	flow_netlink.c	/^static int validate_geneve_opts(struct sw_flow_key *key)$/;"	f	file:
validate_masked	flow_netlink.c	/^static bool validate_masked(u8 *data, int len)$/;"	f	file:
validate_set	flow_netlink.c	/^static int validate_set(const struct nlattr *a,$/;"	f	file:
validate_userspace	flow_netlink.c	/^static int validate_userspace(const struct nlattr *attr)$/;"	f	file:
value	conntrack.c	/^	struct ovs_key_ct_labels value;$/;"	m	struct:md_labels	typeref:struct:md_labels::ovs_key_ct_labels	file:
value	conntrack.c	/^	u32 value;$/;"	m	struct:md_mark	file:
vlan_proto	actions.c	/^	__be16 vlan_proto;$/;"	m	struct:ovs_frag_data	file:
vlan_tci	actions.c	/^	__u16 vlan_tci;$/;"	m	struct:ovs_frag_data	file:
vport	actions.c	/^	struct vport *vport;$/;"	m	struct:ovs_frag_data	typeref:struct:ovs_frag_data::vport	file:
vport	vport-internal_dev.c	/^	struct vport *vport;$/;"	m	struct:internal_dev	typeref:struct:internal_dev::vport	file:
vport	vport.h	/^struct vport {$/;"	s
vport_from_priv	vport.h	/^static inline struct vport *vport_from_priv(void *priv)$/;"	f
vport_hash_bucket	datapath.c	/^static struct hlist_head *vport_hash_bucket(const struct datapath *dp,$/;"	f	file:
vport_netdev_free	vport-netdev.c	/^static void vport_netdev_free(struct rcu_head *rcu)$/;"	f	file:
vport_ops	vport.h	/^struct vport_ops {$/;"	s
vport_parms	vport.h	/^struct vport_parms {$/;"	s
vport_policy	datapath.c	/^static const struct nla_policy vport_policy[OVS_VPORT_ATTR_MAX + 1] = {$/;"	v	typeref:struct:nla_policy	file:
vport_portids	vport.h	/^struct vport_portids {$/;"	s
vport_priv	vport.h	/^static inline void *vport_priv(const struct vport *vport)$/;"	f
vxlan_configure_exts	vport-vxlan.c	/^static int vxlan_configure_exts(struct vport *vport, struct nlattr *attr,$/;"	f	file:
vxlan_create	vport-vxlan.c	/^static struct vport *vxlan_create(const struct vport_parms *parms)$/;"	f	file:
vxlan_get_options	vport-vxlan.c	/^static int vxlan_get_options(const struct vport *vport, struct sk_buff *skb)$/;"	f	file:
vxlan_opt_to_nlattr	flow_netlink.c	/^static int vxlan_opt_to_nlattr(struct sk_buff *skb,$/;"	f	file:
vxlan_tnl_create	vport-vxlan.c	/^static struct vport *vxlan_tnl_create(const struct vport_parms *parms)$/;"	f	file:
vxlan_tun_opt_from_nlattr	flow_netlink.c	/^static int vxlan_tun_opt_from_nlattr(const struct nlattr *attr,$/;"	f	file:
xt_label	datapath.h	/^	bool xt_label;$/;"	m	struct:ovs_net
zone	conntrack.c	/^	struct nf_conntrack_zone zone;$/;"	m	struct:ovs_conntrack_info	typeref:struct:ovs_conntrack_info::nf_conntrack_zone	file:
zone	flow.h	/^		u16 zone;$/;"	m	struct:sw_flow_key::__anon14
